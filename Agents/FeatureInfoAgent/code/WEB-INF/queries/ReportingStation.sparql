# Third party ontologies
PREFIX rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:    <http://www.w3.org/2000/01/rdf-schema#>
PREFIX om:      <http://www.ontology-of-units-of-measure.org/resource/om-2/>
PREFIX geo:     <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX ea:		<http://environment.data.gov.uk/flood-monitoring/def/core/>
PREFIX os: 		<http://data.ordnancesurvey.co.uk/ontology/spatialrelations/>

# Internal ontologies
PREFIX ems:     <https://www.theworldavatar.com/kg/ontoems/>
PREFIX ts:      <https://github.com/cambridge-cares/TheWorldAvatar/blob/main/JPS_Ontology/ontology/ontotimeseries/OntoTimeSeries.owl#>

SELECT * 
WHERE	{
            # Required parameters (all must be present or nothing returned)
			{
				[IRI]
                ems:hasObservationLocation ?Location ;
                ems:dataSource ?Data_Source .
			}

            # Optional parameters (some may be present, some may not)
			{
                # Generic to all locations
                OPTIONAL { [IRI] rdfs:label ?Label . }
                OPTIONAL { [IRI] rdfs:comment ?Comment . }
				OPTIONAL { [IRI] ems:hasIdentifier ?Identifier . }

                # Generic to all EMS locations
                OPTIONAL { [IRI] ems:hasObservationElevation ?Elevation . }

                # Specific to Environment Agency stations
				OPTIONAL { [IRI] os:easting ?Easting . }
				OPTIONAL { [IRI] os:northing ?Northing . }
				OPTIONAL { [IRI] ea:gridReference ?Grid_Reference . }
                OPTIONAL { [IRI] ea:stationReference ?Station_Reference . }
                OPTIONAL { [IRI] ea:catchmentName ?Catchment_Name . }
                OPTIONAL { [IRI] ea:dateOpened ?Date_Opened . }
                OPTIONAL { [IRI] ea:riverName ?River_Name . }
                OPTIONAL { [IRI] ea:town ?Town . }
                OPTIONAL { [IRI] ea:RLOIid ?RLO_lid . }
                OPTIONAL { [IRI] ea:wiskiID ?Wiski_ID . }
				OPTIONAL { [IRI] ems:hasDownstreamStation ?Downstream_Station . }
			}

            # If there's a measurement with values, get its details
			{
				[IRI] ems:reports/om:hasValue ?Measurement .
				?Measurement ^om:hasValue/rdf:type ?quantity_measured .
				BIND(REPLACE(STR(?quantity_measured), ".*\\/",  "") as ?Measured_Quantities) .
				?Measurement om:hasUnit ?Measurement_Unit .
				OPTIONAL { ?Measurement_Unit om:symbol ?Measurement_Symbol. }
                OPTIONAL { ?Measurement ea:qualifier ?Measurement_Qualifier . }
                OPTIONAL { ?Measurement ea:parameterName ?Measurement_Parameter . }
				OPTIONAL { ?Measurement ea:valueType ?Value_Type . }
                OPTIONAL { ?Measurement ea:period ?Measurement_Period . }
				OPTIONAL { ?Measurement ems:hasCurrentRange ?range .
                           BIND(REPLACE(STR(?range), ".*\\/",  "") as ?Range) }
				OPTIONAL { ?Measurement ems:hasCurrentTrend ?trend .
                           BIND(REPLACE(STR(?trend), ".*\\/",  "") as ?Trend) }
			}
			UNION
  			# If ?Forecast is bound, get its details
			{
				[IRI] ems:reports/ems:hasForecastedValue ?Forecast .
				?Forecast ^ems:hasForecastedValue/rdf:type ?quantity_forecasted .
				BIND(REPLACE(STR(?quantity_forecasted), ".*\\/",  "") as ?Forecast_Quantities) .
                ?Forecast om:hasUnit ?Forecast_Unit .
				OPTIONAL { ?Forecast_Unit om:symbol ?Forecast_Symbol. }
                ?Forecast ems:createdOn ?Forecast_Created .
			}
		}